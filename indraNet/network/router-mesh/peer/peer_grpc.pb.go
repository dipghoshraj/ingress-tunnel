// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: peer/peer.proto

package tunnel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Router_ForwardTunnel_FullMethodName = "/tunnel.Router/ForwardTunnel"
)

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouterClient interface {
	ForwardTunnel(ctx context.Context, in *TunnelRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TunnelChunk], error)
}

type routerClient struct {
	cc grpc.ClientConnInterface
}

func NewRouterClient(cc grpc.ClientConnInterface) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) ForwardTunnel(ctx context.Context, in *TunnelRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TunnelChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Router_ServiceDesc.Streams[0], Router_ForwardTunnel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TunnelRequest, TunnelChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Router_ForwardTunnelClient = grpc.ServerStreamingClient[TunnelChunk]

// RouterServer is the server API for Router service.
// All implementations must embed UnimplementedRouterServer
// for forward compatibility.
type RouterServer interface {
	ForwardTunnel(*TunnelRequest, grpc.ServerStreamingServer[TunnelChunk]) error
	mustEmbedUnimplementedRouterServer()
}

// UnimplementedRouterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRouterServer struct{}

func (UnimplementedRouterServer) ForwardTunnel(*TunnelRequest, grpc.ServerStreamingServer[TunnelChunk]) error {
	return status.Errorf(codes.Unimplemented, "method ForwardTunnel not implemented")
}
func (UnimplementedRouterServer) mustEmbedUnimplementedRouterServer() {}
func (UnimplementedRouterServer) testEmbeddedByValue()                {}

// UnsafeRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouterServer will
// result in compilation errors.
type UnsafeRouterServer interface {
	mustEmbedUnimplementedRouterServer()
}

func RegisterRouterServer(s grpc.ServiceRegistrar, srv RouterServer) {
	// If the following call pancis, it indicates UnimplementedRouterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Router_ServiceDesc, srv)
}

func _Router_ForwardTunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TunnelRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouterServer).ForwardTunnel(m, &grpc.GenericServerStream[TunnelRequest, TunnelChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Router_ForwardTunnelServer = grpc.ServerStreamingServer[TunnelChunk]

// Router_ServiceDesc is the grpc.ServiceDesc for Router service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Router_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tunnel.Router",
	HandlerType: (*RouterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ForwardTunnel",
			Handler:       _Router_ForwardTunnel_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "peer/peer.proto",
}

const (
	Gateway_HandleTunnelStream_FullMethodName = "/tunnel.Gateway/HandleTunnelStream"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	HandleTunnelStream(ctx context.Context, in *TunnelRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TunnelChunk], error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) HandleTunnelStream(ctx context.Context, in *TunnelRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TunnelChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[0], Gateway_HandleTunnelStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TunnelRequest, TunnelChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gateway_HandleTunnelStreamClient = grpc.ServerStreamingClient[TunnelChunk]

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility.
type GatewayServer interface {
	HandleTunnelStream(*TunnelRequest, grpc.ServerStreamingServer[TunnelChunk]) error
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayServer struct{}

func (UnimplementedGatewayServer) HandleTunnelStream(*TunnelRequest, grpc.ServerStreamingServer[TunnelChunk]) error {
	return status.Errorf(codes.Unimplemented, "method HandleTunnelStream not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}
func (UnimplementedGatewayServer) testEmbeddedByValue()                 {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	// If the following call pancis, it indicates UnimplementedGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_HandleTunnelStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TunnelRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).HandleTunnelStream(m, &grpc.GenericServerStream[TunnelRequest, TunnelChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gateway_HandleTunnelStreamServer = grpc.ServerStreamingServer[TunnelChunk]

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tunnel.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HandleTunnelStream",
			Handler:       _Gateway_HandleTunnelStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "peer/peer.proto",
}
